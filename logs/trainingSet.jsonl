{"prompt":"Project kenDev files: index.js \nSupported:","completion":"\"File content: import React from \\\"react\\\";\\r\\nimport BaseComprehendor from \\\"../components/BaseComprehendor\\\";\\r\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\r\\n\\r\\nfunction Comprehender() {\\r\\n  return (\\r\\n    <BaseComprehendor />\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Comprehender;\\r\\n\""}
{"prompt":"KenDev file in main/index.module.css \nSupported:","completion":"\"File: @font-face {\\r\\n  font-family: \\\"ColfaxAI\\\";\\r\\n  src: url(https://cdn.openai.com/API/fonts/ColfaxAIRegular.woff2)\\r\\n      format(\\\"woff2\\\"),\\r\\n    url(https://cdn.openai.com/API/fonts/ColfaxAIRegular.woff) format(\\\"woff\\\");\\r\\n  font-weight: normal;\\r\\n  font-style: normal;\\r\\n}\\r\\n@font-face {\\r\\n  font-family: \\\"ColfaxAI\\\";\\r\\n  src: url(https://cdn.openai.com/API/fonts/ColfaxAIBold.woff2) format(\\\"woff2\\\"),\\r\\n    url(https://cdn.openai.com/API/fonts/ColfaxAIBold.woff) format(\\\"woff\\\");\\r\\n  font-weight: bold;\\r\\n  font-style: normal;\\r\\n}\\r\\n.main,\\r\\n.main input {\\r\\n  font-size: 16px;\\r\\n  line-height: 24px;\\r\\n  color: #353740;\\r\\n  font-family: \\\"ColfaxAI\\\", Helvetica, sans-serif;\\r\\n}\\r\\n.main {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  align-items: center;\\r\\n  padding-top: 60px;\\r\\n}\\r\\n.main .icon {\\r\\n  width: 34px;\\r\\n}\\r\\n.main h3 {\\r\\n  font-size: 32px;\\r\\n  line-height: 40px;\\r\\n  font-weight: bold;\\r\\n  color: #202123;\\r\\n  margin: 16px 0 40px;\\r\\n}\\r\\n.main form {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  width: 320px;\\r\\n}\\r\\n.main input[type=\\\"text\\\"] {\\r\\n  padding: 12px 16px;\\r\\n  border: 1px solid #10a37f;\\r\\n  border-radius: 4px;\\r\\n  margin-bottom: 24px;\\r\\n  outline-color: #10a37f;\\r\\n}\\r\\n.main ::placeholder {\\r\\n  color: #8e8ea0;\\r\\n  opacity: 1;\\r\\n}\\r\\n.main input[type=\\\"submit\\\"] {\\r\\n  padding: 12px 0;\\r\\n  color: #fff;\\r\\n  background-color: #10a37f;\\r\\n  border: none;\\r\\n  border-radius: 4px;\\r\\n  text-align: center;\\r\\n  cursor: pointer;\\r\\n}\\r\\n.main .result {\\r\\n  font-weight: bold;\\r\\n  margin-top: 40px;\\r\\n}\\r\\n\""}
{"prompt":"KenDev file in api/comprehend.js \nSupported:","completion":"\"File: import { Configuration, OpenAIApi } from \\\"openai\\\";\\r\\nimport { ModelParameters } from \\\"../../types/model\\\";\\r\\nconst fs = require('fs');\\r\\n\\r\\nconst configuration = new Configuration({\\r\\n  apiKey: process.env.OPENAI_API_KEY,\\r\\n});\\r\\nconst openai = new OpenAIApi(configuration);\\r\\n\\r\\nexport default async function (req, res) {\\r\\n\\r\\n  const { base64Content, question } = req.body;\\r\\n\\r\\n  let prompt = ``\\r\\n\\r\\n  if (base64Content != null) {\\r\\n    const decodedContent = Buffer.from(base64Content, \\\"base64\\\").toString();\\r\\n    prompt = `${question} \\\\n\\\"${decodedContent}\\\"\\\\n\\\\n`\\r\\n  } else {\\r\\n    // prompt = question\\r\\n    const conversationFile = \\\"./logs/conversation.json\\\"\\r\\n    const context = await loadConversation(conversationFile);\\r\\n    prompt = \\\"user: \\\" + question + \\\" \\\" + context.map(({ role, content }) => `${role}: ${content}`)\\r\\n    // console.log(prompt);\\r\\n  }\\r\\n\\r\\n  try {\\r\\n    const params = ModelParameters(prompt)\\r\\n    // const openAiRespose = await OpenAi_createCompletion(params, question);\\r\\n    const openAiRespose = await Test_OpenAi_createCompletion(prompt)\\r\\n    res\\r\\n      .status(200)\\r\\n      .json({ comprehensionResult: openAiRespose.answer, usage: openAiRespose.usage });\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error comprehending code:\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error comprehending code\\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function OpenAi_createCompletion(parameters, question) {\\r\\n  const completion = await openai.createCompletion(parameters);\\r\\n  const answer = completion.data.choices[0].text.trim();\\r\\n\\r\\n  console.log(\\\"consoleReply\\\", { question: question, answer: answer });\\r\\n  //UPDATING TRAINING SET AND CONVERSATIONS\\r\\n  await updateLogs(answer, question)\\r\\n  return {\\r\\n    answer: answer,\\r\\n    usage: completion.data.usage\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function Test_OpenAi_createCompletion(question) {\\r\\n  console.log(\\\"question\\\", question);\\r\\n  const answer = \\\"\\\"\\r\\n  await updateLogs(question, answer)\\r\\n  return {\\r\\n    answer: answer,\\r\\n    usage: 0\\r\\n  }\\r\\n}\\r\\n\\r\\nexport async function loadConversation(File) {\\r\\n  if (fs.existsSync(File)) {\\r\\n    const rawData = fs.readFileSync(File, \\\"utf-8\\\");\\r\\n    return JSON.parse(rawData);\\r\\n  } else {\\r\\n    return [{ role: \\\"system\\\", content: \\\"You are a helpful coding assistant\\\" }];\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction saveConversation(File, content,) {\\r\\n  fs.writeFileSync(File, content)\\r\\n}\\r\\n\\r\\nexport async function updateLogs(question, answer) {\\r\\n  const conversationFile = \\\"./logs/conversation.json\\\"\\r\\n  const conversation = await loadConversation(conversationFile);\\r\\n  //UPDATING DATASET  \\r\\n  conversation.push({ role: \\\"user\\\", content: question });\\r\\n  conversation.push({ role: \\\"system\\\", content: answer });\\r\\n  //SAVING DATASET FILES \\r\\n  const conversationContent = JSON.stringify(conversation, null, 2);\\r\\n  saveConversation(conversationFile, conversationContent);\\r\\n}\\r\\n\\r\\n\\r\\n\""}
{"prompt":"KenDev file in api/converter.js \nSupported:","completion":"\"File: const fs = require('fs');\\r\\n\\r\\n// Read the conversation JSON file\\r\\nconst conversation = JSON.parse(fs.readFileSync('./logs/conversation.json', 'utf-8'));\\r\\n\\r\\nexport default async function (req, res) {\\r\\n\\r\\n    const { convertFile } = req.body\\r\\n    console.log(convertFile);\\r\\n    if (convertFile != true) {\\r\\n        res.status(404).json({ error: \\\"No convert send\\\" })\\r\\n        return\\r\\n    }\\r\\n\\r\\n    try {\\r\\n        // Create a writable JSONL file\\r\\n        const writeStream = fs.createWriteStream('./logs/trainingSet.jsonl');\\r\\n        // Iterate through the conversation, transforming and writing each pair of user-system messages to the JSONL file\\r\\n        for (let i = 1; i < conversation.length; i += 2) {\\r\\n            const user = conversation[i];\\r\\n            const system = conversation[i + 1];\\r\\n\\r\\n            if (user.role === 'user' && system.role === 'system') {\\r\\n                const json = {\\r\\n                    prompt: user.content + ' \\\\nSupported:',\\r\\n                    completion: system.content,\\r\\n                };\\r\\n\\r\\n                const jsonl = JSON.stringify(json);\\r\\n                writeStream.write(`${jsonl}\\\\n`);\\r\\n            }\\r\\n        }\\r\\n        writeStream.end();\\r\\n        console.log('JSONL file has been created as \\\"conversation.jsonl\\\".');\\r\\n        res.status(200).json({ message: \\\"file created!\\\" })\\r\\n    } catch (error) {\\r\\n        res.status(500).json({ error: \\\"creating training file error\\\" })\\r\\n        console.log(\\\"creating training file error:\\\", error);\\r\\n    }\\r\\n\\r\\n}\\r\\n\""}
{"prompt":"KenDev file in api/getFolderContent.js \nSupported:","completion":"\"File: import fs from \\\"fs/promises\\\";\\r\\nimport path from \\\"path\\\";\\r\\n\\r\\nexport default async function (req, res) {\\r\\n  if (req.method === \\\"GET\\\") {\\r\\n    const folderPath = path.join(process.cwd(), \\\"folder-to-read\\\");\\r\\n\\r\\n    try {\\r\\n      const filenames = await fs.readdir(folderPath);\\r\\n      const filePromises = filenames.map(async (filename) => {\\r\\n        if (filename.endsWith(\\\".js\\\") || filename.endsWith(\\\".css\\\")) {\\r\\n          const filePath = path.join(folderPath, filename);\\r\\n          const content = await fs.readFile(filePath, \\\"utf-8\\\");\\r\\n          return { filename, content };\\r\\n        } else {\\r\\n          return null;\\r\\n        }\\r\\n      });\\r\\n\\r\\n      const files = (await Promise.all(filePromises)).filter((file) => file !== null);\\r\\n      res.status(200).json(files);\\r\\n    } catch (error) {\\r\\n      console.error(\\\"Error fetching folder content:\\\", error);\\r\\n      res.status(500).json({ error: \\\"Error fetching folder content\\\" });\\r\\n    }\\r\\n  } else {\\r\\n    res.status(405).json({ error: \\\"Method not allowed\\\" });\\r\\n  }\\r\\n}\\r\\n\""}
{"prompt":"KenDev file in api/trainingFiles.js \nSupported:","completion":"\"File: import { Configuration, OpenAIApi } from \\\"openai\\\";\\r\\nimport { updateLogs } from \\\"./comprehend\\\";\\r\\nconst fs = require(\\\"fs\\\");\\r\\n\\r\\nconst configuration = new Configuration({\\r\\n  apiKey: process.env.OPENAI_API_KEY,\\r\\n});\\r\\nconst openai = new OpenAIApi(configuration);\\r\\n\\r\\nexport default async function (req, res) {\\r\\n\\r\\n  const { createFile, retrieveFile, FileId, getFiles, deleteFile, deleteConversation, deleleTrainingSet, saveFile, FileName, FileContent } = req.body;\\r\\n\\r\\n  const trainingFile = \\\"./logs/trainingSet.jsonl\\\"\\r\\n\\r\\n  if (createFile == true) {\\r\\n    const file = await handleCreateFile(res, trainingFile)\\r\\n    console.log(file)\\r\\n    res.status(200).json(file);\\r\\n  }\\r\\n\\r\\n  if (retrieveFile == true) {\\r\\n    await handleGetSingleFile(res, FileId)\\r\\n    res.status(200).json({ message: \\\"files in the backend console\\\" });\\r\\n  }\\r\\n\\r\\n  if (getFiles == true) {\\r\\n    const filesIds = await getFilesIds(res)\\r\\n    res.status(200).json({ fileIds: filesIds.data });\\r\\n  }\\r\\n\\r\\n  if (deleteFile == true) {\\r\\n    await handleDelete(res, FileId)\\r\\n    res.status(200).json({ message: \\\"file \\\" + FileId + \\\" deleted successfully\\\" })\\r\\n  }\\r\\n\\r\\n  if (deleteConversation) {\\r\\n    removeFile(res, \\\"./logs/conversation.json\\\")\\r\\n    res.status(200).json({ message: \\\"file deleted successfully\\\" })\\r\\n  }\\r\\n\\r\\n  if (deleleTrainingSet) {\\r\\n    removeFile(res, \\\"./logs/trainingSet.jsonl\\\")\\r\\n    res.status(200).json({ message: \\\"file deleted successfully\\\" })\\r\\n  }\\r\\n\\r\\n  if (saveFile == true) {\\r\\n    const params = {\\r\\n      \\\"FileName\\\": FileName,\\r\\n      \\\"Filecontent\\\": FileContent,\\r\\n    }\\r\\n    await saveFileToConversation(res, params);\\r\\n    res.status(200).json({ message: \\\"File added!\\\" })\\r\\n  }\\r\\n\\r\\n}\\r\\n\\r\\nasync function saveFileToConversation(res, params) {\\r\\n  try {\\r\\n    const decodedContent = JSON.stringify(params.Filecontent);\\r\\n    console.log(decodedContent); \\r\\n    await updateLogs(params.FileName, decodedContent)    \\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on saveFileToConversation: \\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on saveFileToConversation\\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function removeFile(res, File) {\\r\\n  try {\\r\\n    fs.unlink(File, function (err) {\\r\\n      if (err) return console.log(err);\\r\\n    });\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on deleting file :\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on deleting file: \\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function handleCreateFile(res, File) {\\r\\n  try {\\r\\n    const response = await openai.createFile(\\r\\n      fs.createReadStream(File),\\r\\n      \\\"fine-tune\\\"\\r\\n    );\\r\\n    console.log(response);\\r\\n    res.status(200).json(response);\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on training model :\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on training model: \\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function handleGetSingleFile(res, FileId) {\\r\\n  try {\\r\\n    const file = await openai.retrieveFile(FileId);\\r\\n    const content = await openai.downloadFile(FileId);\\r\\n    console.log(file);\\r\\n    console.log(content);\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on handleGetSingleFile model :\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on handleGetSingleFile model: \\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function getFilesIds(res) {\\r\\n  try {\\r\\n    const response = await openai.listFiles();\\r\\n    console.log(response.data);\\r\\n    return response.data\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on training model :\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on training model: \\\" });\\r\\n  }\\r\\n}\\r\\n\\r\\nasync function handleDelete(res, FileId) {\\r\\n  try {\\r\\n    const response = await openai.deleteFile(FileId);\\r\\n    console.log(response);\\r\\n    return response;\\r\\n  } catch (error) {\\r\\n    console.error(\\\"Error on training model :\\\", error);\\r\\n    res.status(500).json({ error: \\\"Error on training model: \\\" });\\r\\n  }\\r\\n}\\r\\n\""}
{"prompt":"KenDev file in api/trainingmodel.js \nSupported:","completion":"\"File: import { Configuration, OpenAIApi } from \\\"openai\\\";\\r\\n\\r\\nconst configuration = new Configuration({\\r\\n    apiKey: process.env.OPENAI_API_KEY,\\r\\n});\\r\\nconst openai = new OpenAIApi(configuration);\\r\\n\\r\\nexport default async function (req, res) {\\r\\n\\r\\n    const { newFineTune, FileId, ListFineTunes, saveFile, FileName, FileContent } = req.body;\\r\\n\\r\\n    if (newFineTune === true) {\\r\\n        await createFineTune(res, FileId)\\r\\n        res.status(200).json({ message: \\\"model start training...\\\" });\\r\\n    }\\r\\n\\r\\n    if (ListFineTunes == true) {\\r\\n        const fineTunes = await getFineTune(res)\\r\\n        console.log(fineTunes.data)\\r\\n        res.status(200).json({ Tunes: fineTunes.data });\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nasync function getFineTune(res) {\\r\\n    try {\\r\\n        const response = await openai.listFineTunes();        \\r\\n        return response;\\r\\n    } catch (error) {\\r\\n        console.error(\\\"Error on trainModel  :\\\", error);\\r\\n        res.status(500).json({ error: \\\"Error on trainModel : \\\" });\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function createFineTune(res, FileId) {\\r\\n    try {\\r\\n        const response = await openai.createFineTune({\\r\\n            training_file: FileId,\\r\\n            model: \\\"davinci\\\",\\r\\n            n_epochs: 2\\r\\n        });\\r\\n        console.log(response);\\r\\n        return response;\\r\\n    } catch (error) {\\r\\n        console.error(\\\"Error on trainModel  :\\\", error);\\r\\n        res.status(500).json({ error: \\\"Error on trainModel : \\\" });\\r\\n    }\\r\\n}\""}
{"prompt":"KenDev file in components/BaseComprehendor.js \nSupported:","completion":"\"File: import React, { useState } from \\\"react\\\";\\r\\nimport styles from \\\"./Comprehender.module.css\\\";\\r\\nimport FileInput from \\\"./FileInput\\\";\\r\\nimport ChatBox from \\\"./ChatBox\\\";\\r\\nimport QuestionInput from \\\"./QuestionInput\\\";\\r\\nimport { FolderSelection, getAnswers } from \\\"../hooks/chatManager\\\";\\r\\nimport TrainingButtons from \\\"./TrainingButtons\\\";\\r\\nimport { addFileToConversation } from \\\"../hooks/trainer\\\";\\r\\n\\r\\nfunction BaseComprehendor() {\\r\\n  const [folderFiles, setFolderFiles] = useState([]);\\r\\n  const [projectDescription, setProjectDescription] = useState(null);\\r\\n  const [conversation, setConversation] = useState([]);\\r\\n  const [question, setQuestion] = useState(\\\"\\\");\\r\\n  const [isLoading, setIsLoading] = useState(false);\\r\\n  const [prompt_tokens, setPrompt_tokens] = useState(0);\\r\\n  const [completion_tokens, setCompletion_tokens] = useState(0);\\r\\n  const [total_tokens, setTotal_tokens] = useState(0);\\r\\n\\r\\n  const countTokens = (usageData) => {\\r\\n    setPrompt_tokens((prompt_tokens + usageData.prompt_tokens))\\r\\n    setCompletion_tokens((completion_tokens + usageData.completion_tokens))\\r\\n    setTotal_tokens((total_tokens + usageData.total_tokens))\\r\\n  }\\r\\n\\r\\n  const handleFolderSelection = async (event) => {\\r\\n    const Folder = await FolderSelection(event)\\r\\n    setFolderFiles(Folder.folderFiles);\\r\\n    setProjectDescription(Folder.fileDescriptions);\\r\\n    await addFileToConversation(Folder)\\r\\n  };\\r\\n\\r\\n  const handleAskQuestion = async (_question) => {\\r\\n\\r\\n    setQuestion(_question)\\r\\n\\r\\n    try {\\r\\n      setIsLoading(true);\\r\\n      const answer = await getAnswers(projectDescription, _question)\\r\\n      setConversation((prevConversation) => [\\r\\n        ...prevConversation,\\r\\n        { type: \\\"question\\\", content: _question },\\r\\n        { type: \\\"answer\\\", content: answer.answer },\\r\\n      ]);\\r\\n      //COUNTING API TOKENS USAGE\\r\\n      countTokens(answer.usage)\\r\\n      setIsLoading(false);\\r\\n    } catch (error) {\\r\\n      setIsLoading(false);\\r\\n      console.error(\\\"Error asking question:\\\", error);\\r\\n    }\\r\\n  };\\r\\n\\r\\n  return (\\r\\n\\r\\n    <div className={`${styles.comprehender} p-0`}>\\r\\n      <div className={`${styles.sidebar} col-sm-2`}>\\r\\n        <div>\\r\\n          <h4 className=\\\"my-3\\\">Usage:</h4>\\r\\n          <p>Prompt_tokens: {prompt_tokens}</p>\\r\\n          <p>Completion_tokens: {completion_tokens}</p>\\r\\n          <p>Total_tokens : {total_tokens}</p>\\r\\n          <p>Cost for this session: $ {((total_tokens / 1000) * 0.002).toFixed(4)}</p>\\r\\n        </div>\\r\\n        <FileInput handleFolderSelection={handleFolderSelection} />\\r\\n        <h4>Files</h4>\\r\\n        <ul>\\r\\n          {folderFiles.map((file, index) => (\\r\\n            <li key={index}>{file.filename}</li>\\r\\n          ))}\\r\\n        </ul>\\r\\n        <button onClick={() => setFolderFiles([])} className=\\\"btn btn-secondary w-100\\\">Clear</button>\\r\\n        <TrainingButtons />\\r\\n      </div>\\r\\n      <div className={`${styles.main} col-sm-10 p-0`}>\\r\\n        <ChatBox conversation={conversation} isLoading={isLoading} />\\r\\n        <QuestionInput onAskQuestion={handleAskQuestion} isDisabled={isLoading} className=\\\"form-control\\\" />\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default BaseComprehendor;\\r\\n\""}
{"prompt":"KenDev file in components/ChatBox.js \nSupported:","completion":"\"File: import React from \\\"react\\\";\\r\\nimport styles from \\\"./Comprehender.module.css\\\";\\r\\nimport { FontAwesomeIcon } from \\\"@fortawesome/react-fontawesome\\\";\\r\\nimport { faUser } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\nimport { faRobot } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\nimport Editor from \\\"react-simple-code-editor\\\";\\r\\nimport { highlight, languages } from \\\"prismjs/components/prism-core\\\";\\r\\nimport \\\"prismjs/components/prism-clike\\\";\\r\\nimport \\\"prismjs/components/prism-javascript\\\";\\r\\nimport \\\"prismjs/components/prism-css\\\";\\r\\nimport \\\"prismjs/themes/prism.css\\\";\\r\\n\\r\\nconst ChatBox = ({ conversation, isLoading }) => {\\r\\n  return (\\r\\n    <div className={styles.chatbox}>\\r\\n      <div className={styles.chatboxContainer}>\\r\\n        {conversation.map((message, index) => (\\r\\n          <div key={index} className={`${styles.message} ${styles[message.type]}`}>\\r\\n            <div className={`${styles.logo} ${message.type === \\\"question\\\" ? styles.userLogo : styles.aiLogo}`}>\\r\\n              <FontAwesomeIcon icon={message.type === \\\"question\\\" ? faUser : faRobot} />\\r\\n            </div>\\r\\n            <div className={styles.messageText}>\\r\\n              {message.type === \\\"answer\\\" ? (\\r\\n                <Editor\\r\\n                  value={message.content}\\r\\n                  highlight={(code) => {\\r\\n                    const language = code.trim().startsWith(\\\"<\\\") ? languages.css : languages.javascript;\\r\\n                    return highlight(code, language);\\r\\n                  }}\\r\\n                  padding={10}\\r\\n                  style={{\\r\\n                    fontFamily: '\\\"Fira code\\\", \\\"Fira Mono\\\", monospace',\\r\\n                    fontSize: 16,\\r\\n                    backgroundColor: \\\"#000\\\",\\r\\n                    borderRadius: \\\"4px\\\",\\r\\n                    minHeight: \\\"100px\\\",\\r\\n                    overflow: \\\"auto\\\",\\r\\n                  }}\\r\\n                  readOnly\\r\\n                />\\r\\n              ) : (\\r\\n                message.content\\r\\n              )}\\r\\n\\r\\n            </div>\\r\\n          </div>\\r\\n        ))}\\r\\n        {isLoading && (\\r\\n          <div className=\\\"loading\\\">\\r\\n            <FontAwesomeIcon icon={faRobot} spin />\\r\\n          </div>\\r\\n        )}\\r\\n      </div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ChatBox;\""}
{"prompt":"KenDev file in components/Comprehender.module.css \nSupported:","completion":"\"File: \\r\\n.comprehender {\\r\\n  height: max-content;\\r\\n  color :white;\\r\\n  display: flex;\\r\\n  max-width: 100%;\\r\\n  height: 100vh;\\r\\n  margin: 0 auto;\\r\\n  padding: 20px;\\r\\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\r\\n}\\r\\n\\r\\n.sidebar {\\r\\n  flex: 1;\\r\\n  background-color: #2a2a2a;\\r\\n  border-right: 1px solid #444;\\r\\n  padding: 20px;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.sidebar h3 {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.fileList {\\r\\n  list-style: none;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.file {\\r\\n  padding: 5px;\\r\\n  border-radius: 5px;\\r\\n  cursor: pointer;\\r\\n  transition: background-color 0.3s;\\r\\n}\\r\\n\\r\\n.file:hover {\\r\\n  background-color: #3a3a3a;\\r\\n}\\r\\n\\r\\n.main {\\r\\n  flex: 2;\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 20px;\\r\\n}\\r\\n\\r\\n.folderSelector {\\r\\n  margin-bottom: 20px;\\r\\n}\\r\\n\\r\\n.chatbox {\\r\\n  flex: 1;\\r\\n  background-color: #1e1e1e;    \\r\\n  padding: 20px;\\r\\n  padding: 25px;\\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.chatboxContainer {\\r\\n  background-color: black;\\r\\n  max-width: 750px;\\r\\n  border-radius: 10px;\\r\\n  min-height: 100%;\\r\\n  box-shadow: 0px 10px 12px rgb(44, 44, 44);\\r\\n  margin: auto;\\r\\n  padding: 25px 25px 25px 15px;\\r\\n}\\r\\n\\r\\n\\r\\n.message {\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.question {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.answer {\\r\\n  margin-left: 20px;\\r\\n}\\r\\n\\r\\n.askQuestion {\\r\\n  display: flex;\\r\\n}\\r\\n\\r\\n.askQuestion input {\\r\\n  flex: 1;\\r\\n  margin-right: 10px;\\r\\n  padding: 5px;\\r\\n  border: 1px solid #444;\\r\\n  border-radius: 5px;\\r\\n  background-color: #2a2a2a;\\r\\n  color: #eee;\\r\\n}\\r\\n\\r\\n.askQuestion button {\\r\\n  background-color: #4caf50;\\r\\n  border: none;\\r\\n  padding: 6px 12px;\\r\\n  color: white;\\r\\n  cursor: pointer;\\r\\n  border-radius: 5px;\\r\\n  transition: background-color 0.3s;\\r\\n}\\r\\n\\r\\n.askQuestion button:hover {\\r\\n  background-color: #3d8e40;\\r\\n}\\r\\n\\r\\n.message {\\r\\n  display: flex;\\r\\n  align-items: flex-start;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.logo {\\r\\n  width: 32px;\\r\\n  height: 32px;\\r\\n  margin-right: 10px;\\r\\n  border-radius: 50%;\\r\\n}\\r\\n\\r\\n.userLogo {\\r\\n  background-color: #4caf50;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.aiLogo {\\r\\n  background-color: #2196f3;\\r\\n  display: flex;\\r\\n  justify-content: center;\\r\\n  align-items: center;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.messageText {\\r\\n  flex: 1;\\r\\n}\\r\\n\\r\\n.question {\\r\\n  font-weight: bold;\\r\\n}\\r\\n\\r\\n.answer {\\r\\n  margin-left: 20px;\\r\\n}\""}
{"prompt":"KenDev file in components/Conversation.js \nSupported:","completion":"\"File: import React from \\\"react\\\";\\r\\n\\r\\nfunction Conversation({ conversation }) {\\r\\n  const handleExport = () => {\\r\\n    const data = JSON.stringify(conversation);\\r\\n    const blob = new Blob([data], { type: \\\"application/json\\\" });\\r\\n    const url = URL.createObjectURL(blob);\\r\\n    const link = document.createElement(\\\"a\\\");\\r\\n    link.href = url;\\r\\n    link.download = \\\"conversation.json\\\";\\r\\n    document.body.appendChild(link);\\r\\n    link.click();\\r\\n    document.body.removeChild(link);\\r\\n    URL.revokeObjectURL(url);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div>\\r\\n      {conversation.map((item, index) => (\\r\\n        <div key={index}>\\r\\n          <div>{item.type === \\\"question\\\" ? \\\"You:\\\" : \\\"AI:\\\"}</div>\\r\\n          <div>{item.content}</div>\\r\\n        </div>\\r\\n      ))}\\r\\n      <button onClick={handleExport}>Export Conversation</button>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default Conversation;\\r\\n\""}
{"prompt":"KenDev file in components/FileInput.js \nSupported:","completion":"\"File: \\r\\nfunction FileInput({ handleFolderSelection }) {\\r\\n  return (\\r\\n    <div className=\\\"my-4 w-100\\\">\\r\\n      <label className=\\\"btn btn-primary w-100\\\" htmlFor=\\\"my-file-selector\\\">\\r\\n        <input\\r\\n          id=\\\"my-file-selector\\\"\\r\\n          type=\\\"file\\\"\\r\\n          multiple\\r\\n          style={{ display: \\\"none\\\" }}\\r\\n          onChange={handleFolderSelection}\\r\\n        />\\r\\n        Open Files\\r\\n      </label>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default FileInput;\""}
{"prompt":"KenDev file in components/FolderSelector.js \nSupported:","completion":"\"File: import React from 'react';\\r\\n\\r\\nfunction FolderSelector({ onFolderSelected }) {\\r\\n  const handleFileSelection = async (event) => {\\r\\n    const files = Array.from(event.target.files);\\r\\n    const filePromises = files.map(async (file) => {\\r\\n      const reader = new FileReader();\\r\\n      return new Promise((resolve) => {\\r\\n        reader.onload = (e) => {\\r\\n          resolve({ filename: file.name, content: e.target.result });\\r\\n        };\\r\\n        reader.readAsText(file);\\r\\n      });\\r\\n    });\\r\\n\\r\\n    const folderFiles = await Promise.all(filePromises);\\r\\n    onFolderSelected(folderFiles);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className=\\\"folder-selector\\\">\\r\\n      <input type=\\\"file\\\" webkitdirectory=\\\"true\\\" onChange={handleFileSelection} />\\r\\n      <p>Select a folder containing the files to comprehend.</p>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default FolderSelector;\\r\\n\""}
{"prompt":"KenDev file in components/QuestionInput.module.css \nSupported:","completion":"\"File: .question-input {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  padding: 30px;\\r\\n  background-color: #1e1e1e;\\r\\n}\\r\\n\\r\\n.question-input input {   \\r\\n  width: 100%;\\r\\n  padding: 10px;\\r\\n  border-radius: 10px;\\r\\n  border-color: rgba(32, 33, 35, .5);\\r\\n  border: solid 1px grey;\\r\\n  color: white;\\r\\n  background-color: #393A45;\\r\\n  box-shadow: 0px 5px 12px rgb(44, 44, 44);\\r\\n}\\r\\n\\r\\n.question-input button {\\r\\n  width: 100%;\\r\\n  font-size: 20px;  \\r\\n  padding: 10px;  \\r\\n  color: white;\\r\\n  font-weight: 500;\\r\\n  border: none;\\r\\n  background-color: transparent;\\r\\n  transition: 0.6s;\\r\\n}\\r\\n\\r\\n.question-input button:hover {\\r\\n  color: rgb(60, 194, 116);\\r\\ntransform: scale(1.3);\\r\\n}\\r\\n\\r\\n.question-input__label {\\r\\n  font-weight: bold;\\r\\n  margin-bottom: 8px;\\r\\n}\\r\\n\\r\\n.question-input__input {\\r\\n  margin-bottom: 16px;\\r\\n  padding: 8px;\\r\\n  border-radius: 4px;\\r\\n  border: 1px solid #ccc;\\r\\n  font-size: 16px;\\r\\n}\\r\\n\\r\\n.question-input__button {\\r\\n  padding: 8px;\\r\\n  border-radius: 4px;\\r\\n  background-color: #0077ff;\\r\\n  color: white;\\r\\n  font-size: 16px;\\r\\n  cursor: pointer;\\r\\n  transition: background-color 0.3s ease-in-out;\\r\\n}\\r\\n\\r\\n.question-input__button:hover {\\r\\n  background-color: #005fcc;\\r\\n}\""}
{"prompt":"KenDev file in components/TrainingButtons.js \nSupported:","completion":"\"File: import { getFiles, startTrainingModel, getFileInfo, getFineTunes, createTrainingSetFile } from \\\"../hooks/trainer\\\";\\r\\nimport { deleteConversation, deteleTrainingSet } from \\\"../hooks/trainer\\\";\\r\\n\\r\\nfunction TrainingButtons() {\\r\\n    return (\\r\\n        <>\\r\\n            <h4 className=\\\"my-3\\\">Traning Model</h4>\\r\\n            <button onClick={() => createFile()} className=\\\"btn btn-success w-100 my-2\\\">Upload Traning set</button>\\r\\n            <button onClick={() => getFiles()} className=\\\"btn btn-success w-100 my-2\\\">Get Files</button>\\r\\n            <button onClick={() => getFileInfo()} className=\\\"btn btn-success w-100 my-2\\\">File Info</button>\\r\\n            <button onClick={() => startTrainingModel()} className=\\\"btn btn-success w-100 my-2\\\">Start Training model</button>\\r\\n            <button onClick={() => getFineTunes()} className=\\\"btn btn-success w-100 my-2\\\">Fine Tunes List</button>\\r\\n            <button onClick={() => createTrainingSetFile()} className=\\\"btn btn-success w-100 my-2\\\">Create Training File</button>\\r\\n            <button onClick={() => deleteConversation()} className=\\\"btn btn-danger w-100 my-2\\\">Delete Conversation</button>\\r\\n            <button onClick={() => deteleTrainingSet()} className=\\\"btn btn-danger w-100 my-2\\\">Delete TrainingSet</button>\\r\\n        </>\\r\\n    );\\r\\n}\\r\\n\\r\\nexport default TrainingButtons;\\r\\n\""}
{"prompt":"KenDev file in components/QuestionInput.js \nSupported:","completion":"\"File: import { useState } from \\\"react\\\";\\r\\nimport styles from \\\"./QuestionInput.module.css\\\";\\r\\nimport { FontAwesomeIcon } from \\\"@fortawesome/react-fontawesome\\\";\\r\\nimport { faPaperPlane } from \\\"@fortawesome/free-solid-svg-icons\\\";\\r\\n\\r\\nfunction QuestionInput({ onAskQuestion, isDisabled }) {\\r\\n  const [question, setQuestion] = useState(\\\"\\\");\\r\\n\\r\\n  const handleSubmit = (e) => {\\r\\n    e.preventDefault();\\r\\n    if (question.trim()) {\\r\\n      console.log(question);\\r\\n      onAskQuestion(question);\\r\\n      setQuestion(\\\"\\\");\\r\\n    }\\r\\n  };\\r\\n\\r\\n  const handleChange = (e) => {\\r\\n    setQuestion(e.target.value);\\r\\n  };\\r\\n\\r\\n  return (\\r\\n    <div className={styles[\\\"question-input\\\"]}>\\r\\n      <form onSubmit={handleSubmit} className={styles.form}>\\r\\n        <div className=\\\"row justify-content-center\\\">\\r\\n          <div className=\\\"col-md-5\\\">\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              value={question}\\r\\n              className={styles.input}\\r\\n              onChange={handleChange}\\r\\n              disabled={isDisabled}\\r\\n            />\\r\\n          </div>\\r\\n          <div className=\\\"col-md-1\\\">\\r\\n            <button disabled={isDisabled} type=\\\"submit\\\" className={styles.button}>\\r\\n            <FontAwesomeIcon icon={faPaperPlane} />\\r\\n            </button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\n\\r\\nexport default QuestionInput;\\r\\n\""}